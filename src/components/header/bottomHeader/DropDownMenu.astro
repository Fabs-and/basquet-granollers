---
const { item } = Astro.props;
import { collapsibleArrowHeader } from "@assets/icons";
---

<script>
  document.addEventListener("DOMContentLoaded", (event) => {
    let buttons = document.querySelectorAll("#drop-down-menu");
    function handleClick(this: any) {
      let divArrow = this.querySelector(".rotate");
      divArrow.classList.toggle("rotated");

      let dropDown =
        this.nextElementSibling.nextElementSibling.querySelector(
          ".dropdown-content",
        ); // Adjusted this line
      dropDown.classList.toggle("show");

      this.setAttribute("aria-expanded", dropDown.classList.contains("show"));
    }

    // Check if the device does not support hover
    if (window.matchMedia("(hover: none)").matches) {
      // Add the event listener to each button
      buttons.forEach(function (button) {
        button.addEventListener("click", handleClick);
      });
    } else {
      // Remove the event listener from each button
      buttons.forEach(function (button) {
        button.removeEventListener("click", handleClick);
      });
    }
  });
</script>

<div class="dropdown">
  <button id="drop-down-menu" aria-haspopup="true" aria-expanded="false">
    {item.name.toUpperCase()}
    <div class="rotate">
      <Fragment set:html={collapsibleArrowHeader} />
    </div>
  </button>
  <div class="bridge"></div>
  <nav>
    <ul id="myDropdown" class="dropdown-content">
      {
        item.dropdown.map((dropDownItem) => (
          <li>
            <a href={dropDownItem.link}>{dropDownItem.name!.toUpperCase()}</a>
          </li>
        ))
      }
    </ul>
  </nav>
</div>

<style>
  .show {
    display: flex;
  }
  .dropdown {
    position: relative;
    display: inline-block;
  }

  @media (hover: hover) {
    .dropdown:hover .dropdown-content {
      display: flex;
    }

    .dropdown:hover .rotate {
      transform: rotate(-180deg);
    }
  }

  .bridge {
    position: absolute;
    top: 100%; /* Adjusted to the bottom of the button */
    left: 0;
    width: 100%;
    height: 2.5rem; /* Height of the gap - adjust as needed */
    background-color: transparent; /* Make it invisible */
  }
  .dropdown-content {
    display: none;
    flex-direction: column;
    top: 2.5rem;
    gap: 0.75rem;
    position: absolute;
    background-color: var(--clr-primary);
    padding-inline: 1.31rem;
    padding-block: 0.81rem;
    font-weight: 400;
    width: 11rem;
    z-index: 1;
  }

  .dropdown-content:before {
    content: "";
    width: 0;
    height: 0;
    border-left: 0.71875rem solid transparent; /* Half of the width */
    border-right: 0.71875rem solid transparent; /* Half of the width */
    border-bottom: 0.9375rem solid var(--clr-primary); /* Given height */
    position: absolute;
    top: -0.85rem;
    left: 10%;
    /* transform: translateX(5%); */
  }
  .dropdown-content a {
    /* text-decoration: none; */
    display: block;
  }
  .show {
    display: flex;
  }

  .rotate {
    display: inline-block;
    transform: rotate(0);
    transform-origin: 60% 60%;
    transition: 0.45s transform ease-in-out;
  }

  .rotated {
    transform: rotate(-180deg);
  }

  @keyframes slideInFromTop {
    from {
      transform: translateY(-100%);
      opacity: 0;
    }
    to {
      transform: translateY(0);
      opacity: 1;
    }
  }

  .dropdown-content a {
    /* ... existing styles ... */
    animation-name: slideInFromTop;
    animation-duration: 0.5s; /* adjust this as per your preference */
    animation-fill-mode: forwards; /* to make sure the end state remains */
  }
</style>
